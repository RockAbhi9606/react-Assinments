1) What is a Microservice?
A microservice is an architectural style where an application is composed of small, independent services that communicate over well-defined APIs. Each service is focused on a single business capability and can be developed, deployed, and scaled independently.

2) What is Monolith Architecture?
Monolith architecture is a traditional software development style where an application is built as a single, unified unit. All components and functionalities are tightly integrated and run as a single service.

3) What is the Difference Between Monolith and Microservice?
Monolith: Single codebase, tightly coupled, difficult to scale and update.
Microservice: Multiple smaller services, loosely coupled, easier to scale and update independently.

4) Why Do We Need a useEffect Hook?
The useEffect Hook in React allows you to perform side effects (e.g., data fetching, subscriptions) in function components. It helps manage lifecycle events and ensures that side effects are executed at the right time.

5) What is Optional Chaining?
Optional chaining (?.) is a feature in JavaScript that allows you to safely access deeply nested properties of an object without having to check if each intermediate property exists.

Example:

const user = { address: { street: '123 Main St' } };
console.log(user?.address?.street); // '123 Main St'
console.log(user?.contact?.phone);  // undefined


6) What is Shimmer UI?
Shimmer UI is a user interface pattern that displays a loading placeholder while content is being fetched and rendered. It provides a better user experience by showing a visual indication that data is being loaded.

7) What is the Difference Between JS Expression and JS Statement?
Expression: Produces a value and can be used wherever a value is expected (e.g., 2 + 2, myVar = 5).
Statement: Performs an action and does not produce a value directly (e.g., if statement, for loop).


8) What is Conditional Rendering? Explain with a Code Example
Conditional rendering in React allows you to render different components or elements based on a condition.

Example:

function Greeting({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please sign in.</h1>}
    </div>
  );
}

9) What is CORS?
CORS (Cross-Origin Resource Sharing) is a security feature implemented by browsers to control how resources are requested from a different domain than the one serving the web page. It prevents unauthorized access to resources and ensures that only allowed domains can make requests.

10) What is async and await?
async and await are keywords in JavaScript used to handle asynchronous operations more comfortably. async marks a function as asynchronous, and await pauses the function execution until the promise is resolved.

11) What is the use of const json = await data.json(); in getRestaurants?
The await data.json(); line is used to parse the response from a fetch request as JSON. It waits for the fetch promise to resolve and then converts the response to a JavaScript object.

Example:

async function getRestaurants() {
  const response = await fetch('https://api.example.com/restaurants');
  const json = await response.json();
  return json;
}