1)Difference between Named Export, Default Export, and * as Export
  --Named Export: You can export multiple named variables or functions from a module. When importing, you need to use the exact name of the export.

javascript
Copy code
// module.js
export const myVar = 42;
export function myFunc() { ... }

// anotherFile.js
import { myVar, myFunc } from './module';

  --Default Export: You can export a single default export from a module. When importing, you can give it any name.

javascript
Copy code
// module.js
export default function myDefaultFunc() { ... }

// anotherFile.js
import anyName from './module';

  --* as Export: You can import all named exports from a module as a single object.

javascript
Copy code
// module.js
export const myVar = 42;
export function myFunc() { ... }

// anotherFile.js
import * as myModule from './module';
console.log(myModule.myVar);  // 42
myModule.myFunc();


2)Importance of config.js File
The config.js file typically holds configuration settings for your application. This can include API endpoints, database configurations, authentication keys, and other settings that might change depending on the environment (development, staging, production). Centralizing these settings in a config.js file helps in maintaining and managing environment-specific configurations easily.

3)React Hooks
React Hooks are functions that let you use state and other React features without writing a class. They were introduced in React 16.8 and allow you to manage state and lifecycle features in functional components.

4)Why Do We Need a useState Hook?
The useState Hook allows you to add state management to functional components. It enables you to create state variables and update their values within functional components, making it possible to handle dynamic data and user interactions without needing to convert your component into a class.

javascript
Copy code
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
This makes functional components more powerful and simplifies code by reducing the need for class components.






